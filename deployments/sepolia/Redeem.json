{
  "address": "0x76e0a9DA47fe2D86bDfe72980B927547C52064Ba",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenPawsForHopeToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agent",
          "type": "address"
        }
      ],
      "name": "AgentAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agent",
          "type": "address"
        }
      ],
      "name": "AgentRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        }
      ],
      "name": "ItemRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        }
      ],
      "name": "PostClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "PostCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_agent",
          "type": "address"
        }
      ],
      "name": "addAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        }
      ],
      "name": "closePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_category",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_location",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_contactInfo",
          "type": "string"
        }
      ],
      "name": "createPost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isAgent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "posts",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contactInfo",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isOpen",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        }
      ],
      "name": "redeemItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerUsers",
      "outputs": [
        {
          "internalType": "contract RegisterUsers",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_agent",
          "type": "address"
        }
      ],
      "name": "removeAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPawsForHopeToken",
      "outputs": [
        {
          "internalType": "contract PawsForHopeToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc00d3eb0997f3a9ec516fa14a9aaa7e2f850c67239b1952ee60128a9007d335f",
  "receipt": {
    "to": null,
    "from": "0x8F3d8E8aa095eb8D5A9AdD053e249955061EB358",
    "contractAddress": "0x76e0a9DA47fe2D86bDfe72980B927547C52064Ba",
    "transactionIndex": 44,
    "gasUsed": "1090713",
    "logsBloom": "0x
    "blockHash": "0x3497749352e865513ef320ba91ed4dbce1b3fca16be9541049e9ebe46e9de0ba",
    "transactionHash": "0xc00d3eb0997f3a9ec516fa14a9aaa7e2f850c67239b1952ee60128a9007d335f",
    "logs": [
      {
        "transactionIndex": 44,
        "blockNumber": 7502509,
        "transactionHash": "0xc00d3eb0997f3a9ec516fa14a9aaa7e2f850c67239b1952ee60128a9007d335f",
        "address": "0x76e0a9DA47fe2D86bDfe72980B927547C52064Ba",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008f3d8e8aa095eb8d5a9add053e249955061eb358"
        ],
        "data": "0x",
        "logIndex": 89,
        "blockHash": "0x3497749352e865513ef320ba91ed4dbce1b3fca16be9541049e9ebe46e9de0ba"
      }
    ],
    "blockNumber": 7502509,
    "cumulativeGasUsed": "8904301",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5091F028b9a4151EE9acDF255B3a55263508dEa3"
  ],
  "numDeployments": 2,
  "solcInputHash": "6f4fcf22caf99c7c57c3a6335cd04135",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenPawsForHopeToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"AgentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"AgentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"}],\"name\":\"ItemRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"}],\"name\":\"PostClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PostCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"addAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"closePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contactInfo\",\"type\":\"string\"}],\"name\":\"createPost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAgent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"posts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contactInfo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"redeemItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerUsers\",\"outputs\":[{\"internalType\":\"contract RegisterUsers\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"removeAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPawsForHopeToken\",\"outputs\":[{\"internalType\":\"contract PawsForHopeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"addAgent(address)\":{\"details\":\"Adds a new agent\",\"params\":{\"_agent\":\"Address of the agent to add\"}},\"closePost(uint256)\":{\"details\":\"Closes an existing post\",\"params\":{\"_postId\":\"ID of the post to close\"}},\"constructor\":{\"details\":\"Constructor initializes the contract with references to other contracts\",\"params\":{\"_tokenPawsForHopeToken\":\"Address of the PawsForHopeToken contract\"}},\"createPost(uint256,uint256,string,string,string,string)\":{\"details\":\"Creates a new post for an item\",\"params\":{\"_price\":\"Price in PawsForHopeToken tokens\",\"_stock\":\"Number of items in stock\"}},\"isAgent(address)\":{\"details\":\"Checks if an address is an agent\",\"params\":{\"_address\":\"Address to check\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeemItem(uint256)\":{\"details\":\"Redeems an item from a post using tokens\",\"params\":{\"_postId\":\"ID of the post to redeem from\"}},\"removeAgent(address)\":{\"details\":\"Removes an agent\",\"params\":{\"_agent\":\"Address of the agent to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Redeem.sol\":\"Redeem\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbf61ab2ae1d575a17ea58fbb99ca232baddcc4e0eeea180e84cbc74b0c348b31\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/PawsForHopeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\ncontract PawsForHopeToken is ERC20, Ownable {\\n\\n    mapping(address => bool) private agents;             // Mapping to track authorized agents\\n    mapping(address => bool) private frozenAccounts;     // Mapping to track frozen accounts\\n\\n    bool private globalFreeze;                          // Global freeze switch\\n    address public redeemAddressContract;               // Address where tokens can be redeemed\\n\\n    // Events for various contract actions\\n    event AccountFrozen(address indexed account, bool frozen);\\n    event GlobalFreeze(bool frozen);\\n    event ForcedTransfer(address indexed from, address indexed to, uint256 value);\\n    event TokensRevoked(address indexed from, uint256 value);\\n    event AgentAdded(address indexed agent);\\n    event AgentRemoved(address indexed agent);\\n\\n    /**\\n     * @dev Modifier to restrict functions to authorized agents only\\n     */\\n    modifier onlyAgent() {\\n        require(agents[msg.sender], \\\"Only agents can perform this action\\\");\\n        _;\\n    }\\n\\n\\n    constructor() ERC20(\\\"Paws For Hope Token\\\", \\\"PFHT\\\") Ownable(msg.sender) {}\\n\\n    function addAgent(address _agent) external onlyOwner {\\n        agents[_agent] = true;\\n        emit AgentAdded(_agent);\\n    }\\n\\n\\n    function removeAgent(address _agent) external onlyOwner {\\n        agents[_agent] = false;\\n        emit AgentRemoved(_agent);\\n    }\\n\\n    function setRedeemAddressContract(address _redeemAddress) external onlyOwner {\\n        require(_redeemAddress != address(0), \\\"Cannot set zero address\\\");\\n        redeemAddressContract = _redeemAddress;\\n    }\\n\\n    /**\\n     * @dev Mints new tokens to a specified address\\n     * @param to Address to receive the minted tokens\\n     * @param amount Amount of tokens to mint\\n     */\\n    function mint(address to, uint256 amount) external {\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev Burns tokens from a specified address\\n     * @param from Address to burn tokens from\\n     * @param amount Amount of tokens to burn\\n     */\\n    function burn(address from, uint256 amount) external onlyAgent {\\n        _burn(from, amount);\\n    }\\n\\n    /**\\n     * @dev Freezes a specific account\\n     * @param account Address of the account to freeze\\n     */\\n    function freezeAccount(address account) external onlyAgent {\\n        require(account != address(0), \\\"Cannot freeze zero address\\\");\\n        frozenAccounts[account] = true;\\n        emit AccountFrozen(account, true);\\n    }\\n\\n    /**\\n     * @dev Unfreezes a specific account\\n     * @param account Address of the account to unfreeze\\n     */\\n    function unfreezeAccount(address account) external onlyAgent {\\n        require(account != address(0), \\\"Cannot unfreeze zero address\\\");\\n        require(frozenAccounts[account], \\\"Account is not frozen\\\");\\n        frozenAccounts[account] = false;\\n        emit AccountFrozen(account, false);\\n    }\\n\\n    /**\\n     * @dev Enables global freeze on all transfers\\n     */\\n    function freezeGlobal() external onlyAgent {\\n        globalFreeze = true;\\n        emit GlobalFreeze(true);\\n    }\\n\\n    /**\\n     * @dev Disables global freeze on all transfers\\n     */\\n    function unfreezeGlobal() external onlyAgent {\\n        globalFreeze = false;\\n        emit GlobalFreeze(false);\\n    }\\n\\n    /**\\n     * @dev Forces a transfer between two addresses\\n     * @param from Source address\\n     * @param to Destination address\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function forceTransfer(address from, address to, uint256 amount) external onlyAgent {\\n        require(from != address(0), \\\"Transfer from zero address\\\");\\n        require(to != address(0), \\\"Transfer to zero address\\\");\\n        require(balanceOf(from) >= amount, \\\"Insufficient balance\\\");\\n\\n        _transfer(from, to, amount);\\n        emit ForcedTransfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev Revokes tokens from an address and sends them to the owner\\n     * @param from Address to revoke tokens from\\n     * @param amount Amount of tokens to revoke\\n     */\\n    function revokeTokens(address from, uint256 amount) external onlyAgent {\\n        require(from != address(0), \\\"Revoke from zero address\\\");\\n        require(balanceOf(from) >= amount, \\\"Insufficient balance\\\");\\n\\n        _transfer(from, owner(), amount);\\n        emit TokensRevoked(from, amount);\\n    }\\n\\n    /**\\n     * @dev Override of ERC20 transfer function to restrict transfers to redeem address only\\n     * @param to Destination address\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function transfer(address to, uint256 amount) public override returns (bool) {\\n        require(to == redeemAddressContract, \\\"Transfers are only allowed to redeem address\\\");\\n        return super.transfer(to, amount);\\n    }\\n\\n    /**\\n     * @dev Override of ERC20 transferFrom function to restrict transfers to redeem address only\\n     * @param from Source address\\n     * @param to Destination address\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\\n        require(to == redeemAddressContract, \\\"Transfers are only allowed to redeem address\\\");\\n        return super.transferFrom(from, to, amount);\\n    }\\n    \\n}\",\"keccak256\":\"0x9f320cc14686f64034f6c801ade0224587e03424284e4a401779cf07219b038a\",\"license\":\"MIT\"},\"contracts/Redeem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./RegisterUsers.sol\\\";\\nimport \\\"./PawsForHopeToken.sol\\\";\\n\\n\\ncontract Redeem is Ownable {\\n    // Counter for post IDs\\n    uint256 private postIdCounter = 0;\\n\\n    // Struct to store post information\\n    struct Post {\\n        address creator;\\n        uint256 stock;            // Number of items in stock\\n        uint256 price;            // Price in PawsForHopeToken tokens\\n        string category;          // Category of the item or service (e.g., veterinary, food, adoption)\\n        string description;       // Description of the item or service\\n        string location;          // Location of the service or item\\n        string contactInfo;       // Contact information for further inquiries\\n        uint256 createdAt;        // Timestamp of post creation\\n        bool isOpen;\\n    }\\n\\n    // Reference to other contracts\\n    RegisterUsers public registerUsers;\\n    PawsForHopeToken public tokenPawsForHopeToken;\\n\\n    mapping(address => bool) private agents;     // Mapping to track authorized agents\\n    mapping(uint256 => Post) public posts;      // Mapping from post ID to Post struct\\n\\n    // Events\\n    event AgentAdded(address indexed agent);\\n    event AgentRemoved(address indexed agent);\\n    event PostCreated(uint256 indexed postId, address indexed creator, uint256 stock, uint256 price);\\n    event PostClosed(uint256 indexed postId);\\n    event ItemRedeemed(uint256 indexed postId, address indexed redeemer);\\n\\n    /**\\n     * @dev Constructor initializes the contract with references to other contracts\\n     * @param _tokenPawsForHopeToken Address of the PawsForHopeToken contract\\n     */\\n    constructor( address _tokenPawsForHopeToken) Ownable(msg.sender) {\\n        // require(_registerUsers != address(0), \\\"Invalid RegisterUsers address\\\");\\n        require(_tokenPawsForHopeToken != address(0), \\\"Invalid tokenPawsForHopeToken address\\\");\\n        // registerUsers = RegisterUsers(_registerUsers);\\n        tokenPawsForHopeToken = PawsForHopeToken(_tokenPawsForHopeToken);\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict functions to authorized agents only\\n     */\\n    modifier onlyAgent() {\\n        require(agents[msg.sender], \\\"Only agents can perform this action\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Adds a new agent\\n     * @param _agent Address of the agent to add\\n     */\\n    function addAgent(address _agent) external onlyOwner {\\n        require(_agent != address(0), \\\"Cannot add zero address as agent\\\");\\n        require(!agents[_agent], \\\"Address is already an agent\\\");\\n        agents[_agent] = true;\\n        emit AgentAdded(_agent);\\n    }\\n\\n    /**\\n     * @dev Removes an agent\\n     * @param _agent Address of the agent to remove\\n     */\\n    function removeAgent(address _agent) external onlyOwner {\\n        require(agents[_agent], \\\"Address is not an agent\\\");\\n        agents[_agent] = false;\\n        emit AgentRemoved(_agent);\\n    }\\n\\n    /**\\n     * @dev Checks if an address is an agent\\n     * @param _address Address to check\\n     */\\n    function isAgent(address _address) external view returns (bool) {\\n        return agents[_address];\\n    }\\n\\n    /**\\n     * @dev Creates a new post for an item\\n     * @param _stock Number of items in stock\\n     * @param _price Price in PawsForHopeToken tokens\\n     */\\n    function createPost(uint256 _stock, uint256 _price, string memory _category, string memory _description, string memory _location, string memory _contactInfo) external {\\n        // require(registerUsers.isRegisteredEntity(msg.sender), \\\"Only registered entities can create posts\\\");\\n        require(_stock > 0, \\\"Stock must be greater than 0\\\");\\n        require(_price > 0, \\\"Price must be greater than 0\\\");\\n        require(bytes(_category).length > 0, \\\"Category cannot be empty\\\");\\n        require(bytes(_description).length > 0, \\\"Description cannot be empty\\\");\\n\\n        uint256 postId = postIdCounter++;\\n        posts[postId] = Post({ creator: msg.sender, stock: _stock,\\n            price: _price, category: _category, description: _description,\\n            location: _location,\\n            contactInfo: _contactInfo,\\n            createdAt: block.timestamp,\\n            isOpen: true\\n        });\\n\\n        emit PostCreated(postId, msg.sender, _stock, _price);\\n    }\\n\\n    /**\\n     * @dev Closes an existing post\\n     * @param _postId ID of the post to close\\n     */\\n    function closePost(uint256 _postId) external {\\n        Post storage post = posts[_postId];\\n        require(post.isOpen, \\\"Post is already closed\\\");\\n        require(post.creator == msg.sender || agents[msg.sender], \\\"Only creator or agents can close posts\\\");\\n\\n        post.isOpen = false;\\n        emit PostClosed(_postId);\\n    }\\n\\n    /**\\n     * @dev Redeems an item from a post using tokens\\n     * @param _postId ID of the post to redeem from\\n     */\\n    function redeemItem(uint256 _postId) external {\\n        // require(registerUsers.isRegisteredUser(msg.sender) || registerUsers.isRegisteredEntity(msg.sender), \\\"Only registered users or entities can redeem\\\");\\n\\n        Post storage post = posts[_postId];\\n        require(post.isOpen, \\\"Post is closed\\\");\\n        require(post.stock > 0, \\\"No items left in stock\\\");\\n        require(tokenPawsForHopeToken.balanceOf(msg.sender) >= post.price, \\\"Insufficient token balance\\\");\\n\\n        post.stock--;\\n        tokenPawsForHopeToken.transferFrom(msg.sender, post.creator, post.price);\\n        \\n        emit ItemRedeemed(_postId, msg.sender);\\n    }\\n}\",\"keccak256\":\"0x084e97092824e217153463f163abec21ee1c83565a2d6f152214ba25d4befd57\",\"license\":\"MIT\"},\"contracts/RegisterUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract RegisterUsers is Ownable {\\n\\n        // Counter for community IDs\\n    uint256 private communityIdCounter = 0;\\n\\n    // Struct to store community information\\n    struct Community {\\n        string name;\\n        string description;\\n        address creator;\\n        uint256 createdAt;\\n        address[] members;\\n    }\\n\\n\\n    mapping(uint256 => Community) private communities;     // Mapping to track communities\\n    mapping(address => bool) private agents;              // Mapping to track authorized agents\\n\\n    // Mappings to track registered users and entities\\n    mapping(address => bool) private registeredUsers;\\n    mapping(address => bool) private registeredEntities;\\n\\n    // Events\\n    event AgentAdded(address indexed agent);\\n    event AgentRemoved(address indexed agent);\\n    event UserRegistered(address indexed user, bool isEntity);\\n    event UserRemoved(address indexed user, bool isEntity);\\n    event CommunityCreated(uint256 indexed communityId, string name, address creator);\\n    event MemberAdded(uint256 indexed communityId, address member);\\n\\n     /**\\n     * @dev Modifier to restrict functions to authorized agents only\\n     */\\n    modifier onlyAgent() {\\n        require(agents[msg.sender], \\\"Only agents can perform this action\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor initializes the contract with the deployer as owner\\n     */\\n    constructor() Ownable(msg.sender) {}\\n\\n\\n    /**\\n     * @dev Adds a new agent\\n     * @param _agent Address of the agent to add - pet vets\\n     */\\n    function addAgent(address _agent) external onlyOwner {\\n        require(_agent != address(0), \\\"Cannot add zero address as agent\\\");\\n        require(!agents[_agent], \\\"Address is already an agent\\\");\\n        agents[_agent] = true;\\n        emit AgentAdded(_agent);\\n    }\\n\\n    /**\\n     * @dev Removes an agent\\n     * @param _agent Address of the agent to remove\\n     */\\n    function removeAgent(address _agent) external onlyOwner {\\n        require(agents[_agent], \\\"Address is not an agent\\\");\\n        agents[_agent] = false;\\n        emit AgentRemoved(_agent);\\n    }\\n\\n    /**\\n     * @dev Registers a normal user\\n     * @param _user Address of the user to register\\n     */\\n    function registerUser(address _user) external onlyAgent {\\n        require(_user != address(0), \\\"Cannot register zero address\\\");\\n        require(!registeredUsers[_user], \\\"User already registered\\\");\\n        require(!registeredEntities[_user], \\\"Address already registered as entity\\\");\\n        \\n        registeredUsers[_user] = true;\\n        emit UserRegistered(_user, false);\\n    }\\n\\n    /**\\n     * @dev Registers an entity\\n     * @param _entity Address of the entity to register\\n     */\\n    function registerEntity(address _entity) external onlyAgent {\\n        require(_entity != address(0), \\\"Cannot register zero address\\\");\\n        require(!registeredEntities[_entity], \\\"Entity already registered\\\");\\n        require(!registeredUsers[_entity], \\\"Address already registered as user\\\");\\n        \\n        registeredEntities[_entity] = true;\\n        emit UserRegistered(_entity, true);\\n    }\\n\\n    /**\\n     * @dev Creates a new community\\n     * @param _name Name of the community\\n     * @param _description Description of the community\\n     */\\n    function createCommunity(string calldata _name, string calldata _description) external {\\n        require(bytes(_name).length > 0, \\\"Community name cannot be empty\\\");\\n        require(bytes(_description).length > 0, \\\"Community description cannot be empty\\\");\\n        require(registeredUsers[msg.sender] || registeredEntities[msg.sender], \\\"Only registered users or entities can create communities\\\");\\n\\n        uint256 communityId = communityIdCounter++;\\n        Community storage newCommunity = communities[communityId];\\n        newCommunity.name = _name;\\n        newCommunity.description = _description;\\n        newCommunity.creator = msg.sender;\\n        newCommunity.createdAt = block.timestamp;\\n\\n        emit CommunityCreated(communityId, _name, msg.sender);\\n    }\\n    \\n    \\n    /**\\n     * @dev Adds a member to a community\\n     * @param _communityId ID of the community\\n     * @param _member Address of the member to add\\n     */\\n    function addMember(uint256 _communityId, address _member) external {\\n        require(_communityId < communityIdCounter, \\\"Community does not exist\\\");\\n        require(msg.sender == communities[_communityId].creator, \\\"Only the creator can add members\\\");\\n        require(registeredUsers[_member], \\\"Member must be a registered user\\\");\\n\\n        communities[_communityId].members.push(_member);\\n        emit MemberAdded(_communityId, _member);\\n    }\\n\\n    /**\\n     * @dev Retrieves community information\\n     * @param _communityId ID of the community\\n     */\\n    function getCommunity(uint256 _communityId) external view returns (Community memory) {\\n        require(_communityId < communityIdCounter, \\\"Community does not exist\\\");\\n        return communities[_communityId];\\n    }\\n\\n\\n    /**\\n     * @dev Removes a normal user\\n     * @param _user Address of the user to remove\\n     */\\n    function removeUser(address _user) external onlyAgent {\\n        require(_user != address(0), \\\"Cannot remove zero address\\\");\\n        require(registeredUsers[_user], \\\"User not registered\\\");\\n        \\n        registeredUsers[_user] = false;\\n        emit UserRemoved(_user, false);\\n    }\\n\\n    /**\\n     * @dev Returns a list of all agents\\n     */\\n    function getAgents() external view returns (address[] memory) {\\n        uint256 agentCount = 0;\\n        for (uint256 i = 0; i < block.number; i++) {\\n            if (agents[address(uint160(i))]) {\\n                agentCount++;\\n            }\\n        }\\n\\n        address[] memory agentList = new address[](agentCount);\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < block.number; i++) {\\n            if (agents[address(uint160(i))]) {\\n                agentList[index++] = address(uint160(i));\\n            }\\n        }\\n        return agentList;\\n    }\\n\\n    /**\\n     * @dev Removes an entity\\n     * @param _entity Address of the entity to remove\\n     */\\n    function removeEntity(address _entity) external onlyAgent {\\n        require(_entity != address(0), \\\"Cannot remove zero address\\\");\\n        require(registeredEntities[_entity], \\\"Entity not registered\\\");\\n        \\n        registeredEntities[_entity] = false;\\n        emit UserRemoved(_entity, true);\\n    }\\n\\n    /**\\n     * @dev Checks if an address is a registered user\\n     * @param _address Address to check\\n     */\\n    function isRegisteredUser(address _address) external view returns (bool) {\\n        return registeredUsers[_address];\\n    }\\n\\n    /**\\n     * @dev Checks if an address is a registered entity\\n     * @param _address Address to check\\n     */\\n    function isRegisteredEntity(address _address) external view returns (bool) {\\n        return registeredEntities[_address];\\n    }\\n\\n    /**\\n     * @dev Checks if an address is an agent\\n     * @param _address Address to check\\n     */\\n    function isAgent(address _address) external view returns (bool) {\\n        return agents[_address];\\n    }\\n\\n}\",\"keccak256\":\"0x9e572325aafc217d40216cc9c0ce262eec981553a420dee958859661d9ab7a87\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600060015534801561001557600080fd5b5060405161134a38038061134a8339810160408190526100349161013e565b338061005b57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610064816100ee565b506001600160a01b0381166100c95760405162461bcd60e51b815260206004820152602560248201527f496e76616c696420746f6b656e50617773466f72486f7065546f6b656e206164604482015264647265737360d81b6064820152608401610052565b600380546001600160a01b0319166001600160a01b039290921691909117905561016e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561015057600080fd5b81516001600160a01b038116811461016757600080fd5b9392505050565b6111cd8061017d6000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c806384e798421161008157806397a6278e1161005b57806397a6278e146101d8578063e70bea1d146101eb578063f2fde38b146101fe57600080fd5b806384e79842146101a15780638da5cb5b146101b4578063972481fe146101c557600080fd5b80633ef02d13116100b25780633ef02d131461015b578063614e988a14610186578063715018a61461019957600080fd5b80630b1e7f83146100d95780631c26dc231461010a5780631ffbb0641461011f575b600080fd5b6100ec6100e7366004610d52565b610211565b60405161010199989796959493929190610db1565b60405180910390f35b61011d610118366004610d52565b610488565b005b61014b61012d366004610e3b565b6001600160a01b031660009081526004602052604090205460ff1690565b6040519015158152602001610101565b60035461016e906001600160a01b031681565b6040516001600160a01b039091168152602001610101565b61011d610194366004610f0e565b6106cf565b61011d610974565b61011d6101af366004610e3b565b610988565b6000546001600160a01b031661016e565b60025461016e906001600160a01b031681565b61011d6101e6366004610e3b565b610a9b565b61011d6101f9366004610d52565b610b54565b61011d61020c366004610e3b565b610c8a565b60056020526000908152604090208054600182015460028301546003840180546001600160a01b0390941694929391929161024b90610fcd565b80601f016020809104026020016040519081016040528092919081815260200182805461027790610fcd565b80156102c45780601f10610299576101008083540402835291602001916102c4565b820191906000526020600020905b8154815290600101906020018083116102a757829003601f168201915b5050505050908060040180546102d990610fcd565b80601f016020809104026020016040519081016040528092919081815260200182805461030590610fcd565b80156103525780601f1061032757610100808354040283529160200191610352565b820191906000526020600020905b81548152906001019060200180831161033557829003601f168201915b50505050509080600501805461036790610fcd565b80601f016020809104026020016040519081016040528092919081815260200182805461039390610fcd565b80156103e05780601f106103b5576101008083540402835291602001916103e0565b820191906000526020600020905b8154815290600101906020018083116103c357829003601f168201915b5050505050908060060180546103f590610fcd565b80601f016020809104026020016040519081016040528092919081815260200182805461042190610fcd565b801561046e5780601f106104435761010080835404028352916020019161046e565b820191906000526020600020905b81548152906001019060200180831161045157829003601f168201915b50505050600783015460089093015491929160ff16905089565b6000818152600560205260409020600881015460ff166104ef5760405162461bcd60e51b815260206004820152600e60248201527f506f737420697320636c6f73656400000000000000000000000000000000000060448201526064015b60405180910390fd5b60008160010154116105435760405162461bcd60e51b815260206004820152601660248201527f4e6f206974656d73206c65667420696e2073746f636b0000000000000000000060448201526064016104e6565b60028101546003546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b49190611007565b10156106025760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e636500000000000060448201526064016104e6565b60018101805490600061061483611036565b9091555050600354815460028301546040516323b872dd60e01b81523360048201526001600160a01b03928316602482015260448101919091529116906323b872dd906064016020604051808303816000875af1158015610679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069d919061104d565b50604051339083907fb1eb15dc4b5de6600193c9844a13fce51a803945e8af89faed0f58974b03e6c690600090a35050565b6000861161071f5760405162461bcd60e51b815260206004820152601c60248201527f53746f636b206d7573742062652067726561746572207468616e20300000000060448201526064016104e6565b6000851161076f5760405162461bcd60e51b815260206004820152601c60248201527f5072696365206d7573742062652067726561746572207468616e20300000000060448201526064016104e6565b60008451116107c05760405162461bcd60e51b815260206004820152601860248201527f43617465676f72792063616e6e6f7420626520656d707479000000000000000060448201526064016104e6565b60008351116108115760405162461bcd60e51b815260206004820152601b60248201527f4465736372697074696f6e2063616e6e6f7420626520656d707479000000000060448201526064016104e6565b60018054600091826108228361106f565b90915550604080516101208101825233815260208082018b81528284018b8152606084018b8152608085018b905260a085018a905260c085018990524260e08601526001610100860181905260008881526005909552959093208451815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390911617815591519482019490945592516002840155519293509160038201906108c990826110d7565b50608082015160048201906108de90826110d7565b5060a082015160058201906108f390826110d7565b5060c0820151600682019061090890826110d7565b5060e08201516007820155610100909101516008909101805460ff19169115159190911790556040805188815260208101889052339183917fa449010b893eaee00a1f98d63e14bb12546d5fe4738079a532ac6a1536153de6910160405180910390a350505050505050565b61097c610cc8565b6109866000610cf5565b565b610990610cc8565b6001600160a01b0381166109e65760405162461bcd60e51b815260206004820181905260248201527f43616e6e6f7420616464207a65726f2061646472657373206173206167656e7460448201526064016104e6565b6001600160a01b03811660009081526004602052604090205460ff1615610a4f5760405162461bcd60e51b815260206004820152601b60248201527f4164647265737320697320616c726561647920616e206167656e74000000000060448201526064016104e6565b6001600160a01b038116600081815260046020526040808220805460ff19166001179055517ff68e73cec97f2d70aa641fb26e87a4383686e2efacb648f2165aeb02ac562ec59190a250565b610aa3610cc8565b6001600160a01b03811660009081526004602052604090205460ff16610b0b5760405162461bcd60e51b815260206004820152601760248201527f41646472657373206973206e6f7420616e206167656e7400000000000000000060448201526064016104e6565b6001600160a01b038116600081815260046020526040808220805460ff19169055517fed9c8ad8d5a0a66898ea49d2956929c93ae2e8bd50281b2ed897c5d1a6737e0b9190a250565b6000818152600560205260409020600881015460ff16610bb65760405162461bcd60e51b815260206004820152601660248201527f506f737420697320616c726561647920636c6f7365640000000000000000000060448201526064016104e6565b80546001600160a01b0316331480610bdd57503360009081526004602052604090205460ff165b610c4f5760405162461bcd60e51b815260206004820152602660248201527f4f6e6c792063726561746f72206f72206167656e74732063616e20636c6f736560448201527f20706f737473000000000000000000000000000000000000000000000000000060648201526084016104e6565b60088101805460ff1916905560405182907fc8c5b84ad16852871e3c961bc15ae506c72fcd803553d30e26384d95705f6d0490600090a25050565b610c92610cc8565b6001600160a01b038116610cbc57604051631e4fbdf760e01b8152600060048201526024016104e6565b610cc581610cf5565b50565b6000546001600160a01b031633146109865760405163118cdaa760e01b81523360048201526024016104e6565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610d6457600080fd5b5035919050565b6000815180845260005b81811015610d9157602081850181015186830182015201610d75565b506000602082860101526020601f19601f83011685010191505092915050565b60006101206001600160a01b038c1683528a6020840152896040840152806060840152610de08184018a610d6b565b90508281036080840152610df48189610d6b565b905082810360a0840152610e088188610d6b565b905082810360c0840152610e1c8187610d6b565b60e0840195909552505090151561010090910152979650505050505050565b600060208284031215610e4d57600080fd5b81356001600160a01b0381168114610e6457600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610e9257600080fd5b813567ffffffffffffffff80821115610ead57610ead610e6b565b604051601f8301601f19908116603f01168101908282118183101715610ed557610ed5610e6b565b81604052838152866020858801011115610eee57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c08789031215610f2757600080fd5b8635955060208701359450604087013567ffffffffffffffff80821115610f4d57600080fd5b610f598a838b01610e81565b95506060890135915080821115610f6f57600080fd5b610f7b8a838b01610e81565b94506080890135915080821115610f9157600080fd5b610f9d8a838b01610e81565b935060a0890135915080821115610fb357600080fd5b50610fc089828a01610e81565b9150509295509295509295565b600181811c90821680610fe157607f821691505b60208210810361100157634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561101957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008161104557611045611020565b506000190190565b60006020828403121561105f57600080fd5b81518015158114610e6457600080fd5b60006001820161108157611081611020565b5060010190565b601f8211156110d257600081815260208120601f850160051c810160208610156110af5750805b601f850160051c820191505b818110156110ce578281556001016110bb565b5050505b505050565b815167ffffffffffffffff8111156110f1576110f1610e6b565b611105816110ff8454610fcd565b84611088565b602080601f83116001811461113a57600084156111225750858301515b600019600386901b1c1916600185901b1785556110ce565b600085815260208120601f198616915b828110156111695788860151825594840194600190910190840161114a565b50858210156111875787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212209c08fcf95926ae6f7a9b44d0fd18e2166330e746e6ed24f1ff3e13d168df7f3964736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c806384e798421161008157806397a6278e1161005b57806397a6278e146101d8578063e70bea1d146101eb578063f2fde38b146101fe57600080fd5b806384e79842146101a15780638da5cb5b146101b4578063972481fe146101c557600080fd5b80633ef02d13116100b25780633ef02d131461015b578063614e988a14610186578063715018a61461019957600080fd5b80630b1e7f83146100d95780631c26dc231461010a5780631ffbb0641461011f575b600080fd5b6100ec6100e7366004610d52565b610211565b60405161010199989796959493929190610db1565b60405180910390f35b61011d610118366004610d52565b610488565b005b61014b61012d366004610e3b565b6001600160a01b031660009081526004602052604090205460ff1690565b6040519015158152602001610101565b60035461016e906001600160a01b031681565b6040516001600160a01b039091168152602001610101565b61011d610194366004610f0e565b6106cf565b61011d610974565b61011d6101af366004610e3b565b610988565b6000546001600160a01b031661016e565b60025461016e906001600160a01b031681565b61011d6101e6366004610e3b565b610a9b565b61011d6101f9366004610d52565b610b54565b61011d61020c366004610e3b565b610c8a565b60056020526000908152604090208054600182015460028301546003840180546001600160a01b0390941694929391929161024b90610fcd565b80601f016020809104026020016040519081016040528092919081815260200182805461027790610fcd565b80156102c45780601f10610299576101008083540402835291602001916102c4565b820191906000526020600020905b8154815290600101906020018083116102a757829003601f168201915b5050505050908060040180546102d990610fcd565b80601f016020809104026020016040519081016040528092919081815260200182805461030590610fcd565b80156103525780601f1061032757610100808354040283529160200191610352565b820191906000526020600020905b81548152906001019060200180831161033557829003601f168201915b50505050509080600501805461036790610fcd565b80601f016020809104026020016040519081016040528092919081815260200182805461039390610fcd565b80156103e05780601f106103b5576101008083540402835291602001916103e0565b820191906000526020600020905b8154815290600101906020018083116103c357829003601f168201915b5050505050908060060180546103f590610fcd565b80601f016020809104026020016040519081016040528092919081815260200182805461042190610fcd565b801561046e5780601f106104435761010080835404028352916020019161046e565b820191906000526020600020905b81548152906001019060200180831161045157829003601f168201915b50505050600783015460089093015491929160ff16905089565b6000818152600560205260409020600881015460ff166104ef5760405162461bcd60e51b815260206004820152600e60248201527f506f737420697320636c6f73656400000000000000000000000000000000000060448201526064015b60405180910390fd5b60008160010154116105435760405162461bcd60e51b815260206004820152601660248201527f4e6f206974656d73206c65667420696e2073746f636b0000000000000000000060448201526064016104e6565b60028101546003546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b49190611007565b10156106025760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e636500000000000060448201526064016104e6565b60018101805490600061061483611036565b9091555050600354815460028301546040516323b872dd60e01b81523360048201526001600160a01b03928316602482015260448101919091529116906323b872dd906064016020604051808303816000875af1158015610679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069d919061104d565b50604051339083907fb1eb15dc4b5de6600193c9844a13fce51a803945e8af89faed0f58974b03e6c690600090a35050565b6000861161071f5760405162461bcd60e51b815260206004820152601c60248201527f53746f636b206d7573742062652067726561746572207468616e20300000000060448201526064016104e6565b6000851161076f5760405162461bcd60e51b815260206004820152601c60248201527f5072696365206d7573742062652067726561746572207468616e20300000000060448201526064016104e6565b60008451116107c05760405162461bcd60e51b815260206004820152601860248201527f43617465676f72792063616e6e6f7420626520656d707479000000000000000060448201526064016104e6565b60008351116108115760405162461bcd60e51b815260206004820152601b60248201527f4465736372697074696f6e2063616e6e6f7420626520656d707479000000000060448201526064016104e6565b60018054600091826108228361106f565b90915550604080516101208101825233815260208082018b81528284018b8152606084018b8152608085018b905260a085018a905260c085018990524260e08601526001610100860181905260008881526005909552959093208451815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390911617815591519482019490945592516002840155519293509160038201906108c990826110d7565b50608082015160048201906108de90826110d7565b5060a082015160058201906108f390826110d7565b5060c0820151600682019061090890826110d7565b5060e08201516007820155610100909101516008909101805460ff19169115159190911790556040805188815260208101889052339183917fa449010b893eaee00a1f98d63e14bb12546d5fe4738079a532ac6a1536153de6910160405180910390a350505050505050565b61097c610cc8565b6109866000610cf5565b565b610990610cc8565b6001600160a01b0381166109e65760405162461bcd60e51b815260206004820181905260248201527f43616e6e6f7420616464207a65726f2061646472657373206173206167656e7460448201526064016104e6565b6001600160a01b03811660009081526004602052604090205460ff1615610a4f5760405162461bcd60e51b815260206004820152601b60248201527f4164647265737320697320616c726561647920616e206167656e74000000000060448201526064016104e6565b6001600160a01b038116600081815260046020526040808220805460ff19166001179055517ff68e73cec97f2d70aa641fb26e87a4383686e2efacb648f2165aeb02ac562ec59190a250565b610aa3610cc8565b6001600160a01b03811660009081526004602052604090205460ff16610b0b5760405162461bcd60e51b815260206004820152601760248201527f41646472657373206973206e6f7420616e206167656e7400000000000000000060448201526064016104e6565b6001600160a01b038116600081815260046020526040808220805460ff19169055517fed9c8ad8d5a0a66898ea49d2956929c93ae2e8bd50281b2ed897c5d1a6737e0b9190a250565b6000818152600560205260409020600881015460ff16610bb65760405162461bcd60e51b815260206004820152601660248201527f506f737420697320616c726561647920636c6f7365640000000000000000000060448201526064016104e6565b80546001600160a01b0316331480610bdd57503360009081526004602052604090205460ff165b610c4f5760405162461bcd60e51b815260206004820152602660248201527f4f6e6c792063726561746f72206f72206167656e74732063616e20636c6f736560448201527f20706f737473000000000000000000000000000000000000000000000000000060648201526084016104e6565b60088101805460ff1916905560405182907fc8c5b84ad16852871e3c961bc15ae506c72fcd803553d30e26384d95705f6d0490600090a25050565b610c92610cc8565b6001600160a01b038116610cbc57604051631e4fbdf760e01b8152600060048201526024016104e6565b610cc581610cf5565b50565b6000546001600160a01b031633146109865760405163118cdaa760e01b81523360048201526024016104e6565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610d6457600080fd5b5035919050565b6000815180845260005b81811015610d9157602081850181015186830182015201610d75565b506000602082860101526020601f19601f83011685010191505092915050565b60006101206001600160a01b038c1683528a6020840152896040840152806060840152610de08184018a610d6b565b90508281036080840152610df48189610d6b565b905082810360a0840152610e088188610d6b565b905082810360c0840152610e1c8187610d6b565b60e0840195909552505090151561010090910152979650505050505050565b600060208284031215610e4d57600080fd5b81356001600160a01b0381168114610e6457600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610e9257600080fd5b813567ffffffffffffffff80821115610ead57610ead610e6b565b604051601f8301601f19908116603f01168101908282118183101715610ed557610ed5610e6b565b81604052838152866020858801011115610eee57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c08789031215610f2757600080fd5b8635955060208701359450604087013567ffffffffffffffff80821115610f4d57600080fd5b610f598a838b01610e81565b95506060890135915080821115610f6f57600080fd5b610f7b8a838b01610e81565b94506080890135915080821115610f9157600080fd5b610f9d8a838b01610e81565b935060a0890135915080821115610fb357600080fd5b50610fc089828a01610e81565b9150509295509295509295565b600181811c90821680610fe157607f821691505b60208210810361100157634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561101957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008161104557611045611020565b506000190190565b60006020828403121561105f57600080fd5b81518015158114610e6457600080fd5b60006001820161108157611081611020565b5060010190565b601f8211156110d257600081815260208120601f850160051c810160208610156110af5750805b601f850160051c820191505b818110156110ce578281556001016110bb565b5050505b505050565b815167ffffffffffffffff8111156110f1576110f1610e6b565b611105816110ff8454610fcd565b84611088565b602080601f83116001811461113a57600084156111225750858301515b600019600386901b1c1916600185901b1785556110ce565b600085815260208120601f198616915b828110156111695788860151825594840194600190910190840161114a565b50858210156111875787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212209c08fcf95926ae6f7a9b44d0fd18e2166330e746e6ed24f1ff3e13d168df7f3964736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addAgent(address)": {
        "details": "Adds a new agent",
        "params": {
          "_agent": "Address of the agent to add"
        }
      },
      "closePost(uint256)": {
        "details": "Closes an existing post",
        "params": {
          "_postId": "ID of the post to close"
        }
      },
      "constructor": {
        "details": "Constructor initializes the contract with references to other contracts",
        "params": {
          "_tokenPawsForHopeToken": "Address of the PawsForHopeToken contract"
        }
      },
      "createPost(uint256,uint256,string,string,string,string)": {
        "details": "Creates a new post for an item",
        "params": {
          "_price": "Price in PawsForHopeToken tokens",
          "_stock": "Number of items in stock"
        }
      },
      "isAgent(address)": {
        "details": "Checks if an address is an agent",
        "params": {
          "_address": "Address to check"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "redeemItem(uint256)": {
        "details": "Redeems an item from a post using tokens",
        "params": {
          "_postId": "ID of the post to redeem from"
        }
      },
      "removeAgent(address)": {
        "details": "Removes an agent",
        "params": {
          "_agent": "Address of the agent to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/Redeem.sol:Redeem",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2466,
        "contract": "contracts/Redeem.sol:Redeem",
        "label": "postIdCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2488,
        "contract": "contracts/Redeem.sol:Redeem",
        "label": "registerUsers",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(RegisterUsers)3447"
      },
      {
        "astId": 2491,
        "contract": "contracts/Redeem.sol:Redeem",
        "label": "tokenPawsForHopeToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(PawsForHopeToken)2455"
      },
      {
        "astId": 2495,
        "contract": "contracts/Redeem.sol:Redeem",
        "label": "agents",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2500,
        "contract": "contracts/Redeem.sol:Redeem",
        "label": "posts",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Post)2485_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(PawsForHopeToken)2455": {
        "encoding": "inplace",
        "label": "contract PawsForHopeToken",
        "numberOfBytes": "20"
      },
      "t_contract(RegisterUsers)3447": {
        "encoding": "inplace",
        "label": "contract RegisterUsers",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Post)2485_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Redeem.Post)",
        "numberOfBytes": "32",
        "value": "t_struct(Post)2485_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Post)2485_storage": {
        "encoding": "inplace",
        "label": "struct Redeem.Post",
        "members": [
          {
            "astId": 2468,
            "contract": "contracts/Redeem.sol:Redeem",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2470,
            "contract": "contracts/Redeem.sol:Redeem",
            "label": "stock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2472,
            "contract": "contracts/Redeem.sol:Redeem",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2474,
            "contract": "contracts/Redeem.sol:Redeem",
            "label": "category",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2476,
            "contract": "contracts/Redeem.sol:Redeem",
            "label": "description",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 2478,
            "contract": "contracts/Redeem.sol:Redeem",
            "label": "location",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 2480,
            "contract": "contracts/Redeem.sol:Redeem",
            "label": "contactInfo",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 2482,
            "contract": "contracts/Redeem.sol:Redeem",
            "label": "createdAt",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 2484,
            "contract": "contracts/Redeem.sol:Redeem",
            "label": "isOpen",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}