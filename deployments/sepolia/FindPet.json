{
  "address": "0xd4475C6409a6F7a3AC042aaBE53f8F455081610f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registerUsers",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenPawsForHopeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_USDCpaws",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agent",
          "type": "address"
        }
      ],
      "name": "AgentAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agent",
          "type": "address"
        }
      ],
      "name": "AgentRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "donor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "DonationProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "donor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DonationReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PostClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PostCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_agent",
          "type": "address"
        }
      ],
      "name": "addAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "closePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_imgUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_petName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_location",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_contactInfo",
          "type": "string"
        }
      ],
      "name": "createPost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPosts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "imgUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "petName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "location",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "contactInfo",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isOpen",
              "type": "bool"
            }
          ],
          "internalType": "struct FindPet.Post[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        }
      ],
      "name": "getPost",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isOpen",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isAgent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "posts",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "imgUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "petName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contactInfo",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isOpen",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerUsers",
      "outputs": [
        {
          "internalType": "contract RegisterUsers",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_agent",
          "type": "address"
        }
      ],
      "name": "removeAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPawsForHopeToken",
      "outputs": [
        {
          "internalType": "contract PawsForHopeToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x47594a2a236829a6211b4d3c87ccb6d571b244ae61e8a3b49f3bf54ba53b7b9b",
  "receipt": {
    "to": null,
    "from": "0x8F3d8E8aa095eb8D5A9AdD053e249955061EB358",
    "contractAddress": "0xd4475C6409a6F7a3AC042aaBE53f8F455081610f",
    "transactionIndex": 29,
    "gasUsed": "1644404",
    "logsBloom": "0x
    "blockHash": "0xa84d53a97842ddfe435b0f463bb6401e53c62d7db351cc115513f6c484a0cea2",
    "transactionHash": "0x47594a2a236829a6211b4d3c87ccb6d571b244ae61e8a3b49f3bf54ba53b7b9b",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 7502508,
        "transactionHash": "0x47594a2a236829a6211b4d3c87ccb6d571b244ae61e8a3b49f3bf54ba53b7b9b",
        "address": "0xd4475C6409a6F7a3AC042aaBE53f8F455081610f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008f3d8e8aa095eb8d5a9add053e249955061eb358"
        ],
        "data": "0x",
        "logIndex": 52,
        "blockHash": "0xa84d53a97842ddfe435b0f463bb6401e53c62d7db351cc115513f6c484a0cea2"
      }
    ],
    "blockNumber": 7502508,
    "cumulativeGasUsed": "11739168",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE104860e2caE646f2F2C96F4164a8459061cc988",
    "0x5091F028b9a4151EE9acDF255B3a55263508dEa3",
    "0x17896b08cabD2759cc2047a8e726845CbEE9a3fB"
  ],
  "numDeployments": 2,
  "solcInputHash": "6f4fcf22caf99c7c57c3a6335cd04135",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registerUsers\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenPawsForHopeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDCpaws\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"AgentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"AgentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"DonationProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DonationReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PostClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PostCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"addAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"closePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_imgUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_petName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contactInfo\",\"type\":\"string\"}],\"name\":\"createPost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPosts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imgUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"petName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contactInfo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"internalType\":\"struct FindPet.Post[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"getPost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAgent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"posts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imgUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"petName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contactInfo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerUsers\",\"outputs\":[{\"internalType\":\"contract RegisterUsers\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"removeAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPawsForHopeToken\",\"outputs\":[{\"internalType\":\"contract PawsForHopeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"addAgent(address)\":{\"details\":\"Adds a new agent\",\"params\":{\"_agent\":\"Address of the agent to add\"}},\"closePost(uint256,address)\":{\"details\":\"Closes a post and distributes the reward\",\"params\":{\"_beneficiary\":\"Address to receive the reward\",\"_postId\":\"ID of the post to close\"}},\"createPost(uint256,string,string,string,string,string)\":{\"details\":\"Creates a new post with a reward amount\",\"params\":{\"_amount\":\"Amount of USDC for the reward\"}},\"getAllPosts()\":{\"details\":\"Returns all posts.\",\"returns\":{\"_0\":\"allPosts An array of Post structs containing all the posts.\"}},\"getPost(uint256)\":{\"details\":\"Returns post information\",\"params\":{\"_postId\":\"ID of the post\"}},\"isAgent(address)\":{\"details\":\"Checks if an address is an agent\",\"params\":{\"_address\":\"Address to check\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeAgent(address)\":{\"details\":\"Removes an agent\",\"params\":{\"_agent\":\"Address of the agent to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FindPet.sol\":\"FindPet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbf61ab2ae1d575a17ea58fbb99ca232baddcc4e0eeea180e84cbc74b0c348b31\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/FindPet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./RegisterUsers.sol\\\";\\nimport \\\"./PawsForHopeToken.sol\\\";\\n\\n\\ncontract FindPet is Ownable {\\n    \\n    // Counter for post IDs\\n    uint256 private postIdCounter = 0;\\n\\n    // Sepolia Mainnet USDC contract address\\n    //address constant public USDC = 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913;\\n\\n    // USDCPaws contract address\\n    // address constant public USDC = 0x7EF2e0048f5bAeDe046f6BF797943daF4ED8CB47;\\n\\n    // Struct to store post a lost pet  information\\n    struct Post {\\n        address creator;\\n        uint256 amount;\\n        string imgUrl;\\n        string petName;           // Name of the lost pet\\n        string description;       // Description of the pet (e.g., color, breed)\\n        string location;          // Location where the pet was last seen\\n        string contactInfo;       // Contact information for the creator\\n        uint256 timestamp;\\n        bool isOpen;\\n    }\\n\\n    // Mapping from post ID to Post struct\\n    mapping(uint256 => Post) public posts;\\n    // Mapping to track authorized agents\\n    mapping(address => bool) private agents;\\n\\n    // Events\\n    event PostCreated(uint256 indexed postId, address indexed creator, uint256 amount);\\n    event PostClosed(uint256 indexed postId, address indexed beneficiary, uint256 amount);\\n    \\n    // Reference to other contracts\\n    RegisterUsers public registerUsers;\\n    PawsForHopeToken public tokenPawsForHopeToken;\\n    IERC20 public usdc;\\n\\n    // Events\\n    event AgentAdded(address indexed agent);\\n    event AgentRemoved(address indexed agent);\\n    event DonationReceived(address indexed donor, uint256 amount);\\n    event DonationProcessed(address indexed donor, uint256 amount, uint256 tokens);\\n\\n    /**\\n     * @dev Modifier to restrict functions to authorized agents only\\n     */\\n    modifier onlyAgent() {\\n        require(agents[msg.sender], \\\"Only agents can perform this action\\\");\\n        _;\\n    }\\n\\n    \\n     // @dev Constructor initializes the contract with references to other contracts\\n     // @param _registerUsers Address of the RegisterUsers contract\\n     // @param tokenPawsForHopeToken Address of the tokenPawsForHopeToken contract\\n     constructor(address _registerUsers, address _tokenPawsForHopeToken, address _USDCpaws) Ownable(msg.sender) {\\n        require(_registerUsers != address(0), \\\"Invalid RegisterUsers address\\\");\\n        require(_tokenPawsForHopeToken != address(0), \\\"Invalid tokenPawsForHopeToken address\\\");\\n\\n        registerUsers = RegisterUsers(_registerUsers);\\n        tokenPawsForHopeToken = PawsForHopeToken(_tokenPawsForHopeToken);\\n        usdc = IERC20(_USDCpaws);\\n    }\\n\\n    /**\\n     * @dev Adds a new agent\\n     * @param _agent Address of the agent to add\\n     */\\n    function addAgent(address _agent) external onlyOwner {\\n        require(_agent != address(0), \\\"Cannot add zero address as agent\\\");\\n        require(!agents[_agent], \\\"Address is already an agent\\\");\\n        agents[_agent] = true;\\n        emit AgentAdded(_agent);\\n    }\\n\\n    /**\\n     * @dev Removes an agent\\n     * @param _agent Address of the agent to remove\\n     */\\n    function removeAgent(address _agent) external onlyOwner {\\n        require(agents[_agent], \\\"Address is not an agent\\\");\\n        agents[_agent] = false;\\n        emit AgentRemoved(_agent);\\n    }\\n\\n    /**\\n     * @dev Checks if an address is an agent\\n     * @param _address Address to check\\n     */\\n    function isAgent(address _address) external view returns (bool) {\\n        return agents[_address];\\n    }\\n\\n    /**\\n     * @dev Creates a new post with a reward amount\\n     * @param _amount Amount of USDC for the reward\\n     */\\n    function createPost(uint256 _amount, string memory _imgUrl, string memory _petName, string memory _description, string memory _location, string memory _contactInfo) external {\\n        // check if sender is registered user or entity\\n        require( registerUsers.isRegisteredUser(msg.sender) || registerUsers.isRegisteredEntity(msg.sender), \\\"Must be registered user or entity\\\");\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n\\n        // Transfer USDC from sender to contract\\n        require(usdc.transferFrom(msg.sender, address(this), _amount), \\\"USDC transfer failed\\\");\\n\\n        // Create new post\\n        uint256 postId = postIdCounter++;\\n        posts[postId] = Post({ creator: msg.sender, amount: _amount, imgUrl: _imgUrl, petName: _petName, description: _description, location: _location, contactInfo: _contactInfo, timestamp: block.timestamp, isOpen: true});\\n\\n        emit PostCreated(postId, msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @dev Closes a post and distributes the reward\\n     * @param _postId ID of the post to close\\n     * @param _beneficiary Address to receive the reward\\n     */\\n    function closePost(uint256 _postId, address _beneficiary) external {\\n        require(_postId < postIdCounter, \\\"Post does not exist\\\");\\n        Post storage post = posts[_postId];\\n        require(post.isOpen, \\\"Post is already closed\\\");\\n        require(msg.sender == post.creator || agents[msg.sender], \\\"Only creator or agent can close post\\\");\\n        require(_beneficiary != address(0), \\\"Invalid beneficiary address\\\");\\n\\n        post.isOpen = false;\\n\\n        // Calculate amounts\\n        uint256 beneficiaryAmount = (post.amount * 97) / 100;\\n        uint256 ownerAmount = post.amount - beneficiaryAmount;\\n\\n        // Transfer rewards in USDC from this contract\\n        require(usdc.transferFrom(address(this), _beneficiary, beneficiaryAmount), \\\"Beneficiary USDC transfer failed\\\");\\n        require(usdc.transferFrom(address(this), owner(), ownerAmount), \\\"Owner USDC transfer failed\\\");\\n\\n        // Mint HelPet tokens to beneficiary\\n        tokenPawsForHopeToken.mint(_beneficiary, 50);\\n\\n        emit PostClosed(_postId, _beneficiary, post.amount);\\n    }\\n\\n    /**\\n     * @dev Returns post information\\n     * @param _postId ID of the post\\n     */\\n    function getPost(uint256 _postId) external view returns (address creator, uint256 amount, bool isOpen) {\\n        require(_postId < postIdCounter, \\\"Post does not exist\\\");\\n        Post storage post = posts[_postId];\\n        return (post.creator, post.amount, post.isOpen);\\n    }\\n    \\n    /**\\n    * @dev Returns all posts.\\n    * @return allPosts An array of Post structs containing all the posts.\\n    */\\n    function getAllPosts() external view returns (Post[] memory) {\\n        Post[] memory allPosts = new Post[](postIdCounter);\\n        \\n        for (uint256 i = 0; i < postIdCounter; i++) {\\n            allPosts[i] = posts[i];\\n        }\\n        \\n        return allPosts;\\n    }\\n\\n}\",\"keccak256\":\"0x699933a80e567be9f4d053c163b4df3a85489aa070264288dfecdd3409c35c69\",\"license\":\"MIT\"},\"contracts/PawsForHopeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\ncontract PawsForHopeToken is ERC20, Ownable {\\n\\n    mapping(address => bool) private agents;             // Mapping to track authorized agents\\n    mapping(address => bool) private frozenAccounts;     // Mapping to track frozen accounts\\n\\n    bool private globalFreeze;                          // Global freeze switch\\n    address public redeemAddressContract;               // Address where tokens can be redeemed\\n\\n    // Events for various contract actions\\n    event AccountFrozen(address indexed account, bool frozen);\\n    event GlobalFreeze(bool frozen);\\n    event ForcedTransfer(address indexed from, address indexed to, uint256 value);\\n    event TokensRevoked(address indexed from, uint256 value);\\n    event AgentAdded(address indexed agent);\\n    event AgentRemoved(address indexed agent);\\n\\n    /**\\n     * @dev Modifier to restrict functions to authorized agents only\\n     */\\n    modifier onlyAgent() {\\n        require(agents[msg.sender], \\\"Only agents can perform this action\\\");\\n        _;\\n    }\\n\\n\\n    constructor() ERC20(\\\"Paws For Hope Token\\\", \\\"PFHT\\\") Ownable(msg.sender) {}\\n\\n    function addAgent(address _agent) external onlyOwner {\\n        agents[_agent] = true;\\n        emit AgentAdded(_agent);\\n    }\\n\\n\\n    function removeAgent(address _agent) external onlyOwner {\\n        agents[_agent] = false;\\n        emit AgentRemoved(_agent);\\n    }\\n\\n    function setRedeemAddressContract(address _redeemAddress) external onlyOwner {\\n        require(_redeemAddress != address(0), \\\"Cannot set zero address\\\");\\n        redeemAddressContract = _redeemAddress;\\n    }\\n\\n    /**\\n     * @dev Mints new tokens to a specified address\\n     * @param to Address to receive the minted tokens\\n     * @param amount Amount of tokens to mint\\n     */\\n    function mint(address to, uint256 amount) external {\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev Burns tokens from a specified address\\n     * @param from Address to burn tokens from\\n     * @param amount Amount of tokens to burn\\n     */\\n    function burn(address from, uint256 amount) external onlyAgent {\\n        _burn(from, amount);\\n    }\\n\\n    /**\\n     * @dev Freezes a specific account\\n     * @param account Address of the account to freeze\\n     */\\n    function freezeAccount(address account) external onlyAgent {\\n        require(account != address(0), \\\"Cannot freeze zero address\\\");\\n        frozenAccounts[account] = true;\\n        emit AccountFrozen(account, true);\\n    }\\n\\n    /**\\n     * @dev Unfreezes a specific account\\n     * @param account Address of the account to unfreeze\\n     */\\n    function unfreezeAccount(address account) external onlyAgent {\\n        require(account != address(0), \\\"Cannot unfreeze zero address\\\");\\n        require(frozenAccounts[account], \\\"Account is not frozen\\\");\\n        frozenAccounts[account] = false;\\n        emit AccountFrozen(account, false);\\n    }\\n\\n    /**\\n     * @dev Enables global freeze on all transfers\\n     */\\n    function freezeGlobal() external onlyAgent {\\n        globalFreeze = true;\\n        emit GlobalFreeze(true);\\n    }\\n\\n    /**\\n     * @dev Disables global freeze on all transfers\\n     */\\n    function unfreezeGlobal() external onlyAgent {\\n        globalFreeze = false;\\n        emit GlobalFreeze(false);\\n    }\\n\\n    /**\\n     * @dev Forces a transfer between two addresses\\n     * @param from Source address\\n     * @param to Destination address\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function forceTransfer(address from, address to, uint256 amount) external onlyAgent {\\n        require(from != address(0), \\\"Transfer from zero address\\\");\\n        require(to != address(0), \\\"Transfer to zero address\\\");\\n        require(balanceOf(from) >= amount, \\\"Insufficient balance\\\");\\n\\n        _transfer(from, to, amount);\\n        emit ForcedTransfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev Revokes tokens from an address and sends them to the owner\\n     * @param from Address to revoke tokens from\\n     * @param amount Amount of tokens to revoke\\n     */\\n    function revokeTokens(address from, uint256 amount) external onlyAgent {\\n        require(from != address(0), \\\"Revoke from zero address\\\");\\n        require(balanceOf(from) >= amount, \\\"Insufficient balance\\\");\\n\\n        _transfer(from, owner(), amount);\\n        emit TokensRevoked(from, amount);\\n    }\\n\\n    /**\\n     * @dev Override of ERC20 transfer function to restrict transfers to redeem address only\\n     * @param to Destination address\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function transfer(address to, uint256 amount) public override returns (bool) {\\n        require(to == redeemAddressContract, \\\"Transfers are only allowed to redeem address\\\");\\n        return super.transfer(to, amount);\\n    }\\n\\n    /**\\n     * @dev Override of ERC20 transferFrom function to restrict transfers to redeem address only\\n     * @param from Source address\\n     * @param to Destination address\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\\n        require(to == redeemAddressContract, \\\"Transfers are only allowed to redeem address\\\");\\n        return super.transferFrom(from, to, amount);\\n    }\\n    \\n}\",\"keccak256\":\"0x9f320cc14686f64034f6c801ade0224587e03424284e4a401779cf07219b038a\",\"license\":\"MIT\"},\"contracts/RegisterUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract RegisterUsers is Ownable {\\n\\n        // Counter for community IDs\\n    uint256 private communityIdCounter = 0;\\n\\n    // Struct to store community information\\n    struct Community {\\n        string name;\\n        string description;\\n        address creator;\\n        uint256 createdAt;\\n        address[] members;\\n    }\\n\\n\\n    mapping(uint256 => Community) private communities;     // Mapping to track communities\\n    mapping(address => bool) private agents;              // Mapping to track authorized agents\\n\\n    // Mappings to track registered users and entities\\n    mapping(address => bool) private registeredUsers;\\n    mapping(address => bool) private registeredEntities;\\n\\n    // Events\\n    event AgentAdded(address indexed agent);\\n    event AgentRemoved(address indexed agent);\\n    event UserRegistered(address indexed user, bool isEntity);\\n    event UserRemoved(address indexed user, bool isEntity);\\n    event CommunityCreated(uint256 indexed communityId, string name, address creator);\\n    event MemberAdded(uint256 indexed communityId, address member);\\n\\n     /**\\n     * @dev Modifier to restrict functions to authorized agents only\\n     */\\n    modifier onlyAgent() {\\n        require(agents[msg.sender], \\\"Only agents can perform this action\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor initializes the contract with the deployer as owner\\n     */\\n    constructor() Ownable(msg.sender) {}\\n\\n\\n    /**\\n     * @dev Adds a new agent\\n     * @param _agent Address of the agent to add - pet vets\\n     */\\n    function addAgent(address _agent) external onlyOwner {\\n        require(_agent != address(0), \\\"Cannot add zero address as agent\\\");\\n        require(!agents[_agent], \\\"Address is already an agent\\\");\\n        agents[_agent] = true;\\n        emit AgentAdded(_agent);\\n    }\\n\\n    /**\\n     * @dev Removes an agent\\n     * @param _agent Address of the agent to remove\\n     */\\n    function removeAgent(address _agent) external onlyOwner {\\n        require(agents[_agent], \\\"Address is not an agent\\\");\\n        agents[_agent] = false;\\n        emit AgentRemoved(_agent);\\n    }\\n\\n    /**\\n     * @dev Registers a normal user\\n     * @param _user Address of the user to register\\n     */\\n    function registerUser(address _user) external onlyAgent {\\n        require(_user != address(0), \\\"Cannot register zero address\\\");\\n        require(!registeredUsers[_user], \\\"User already registered\\\");\\n        require(!registeredEntities[_user], \\\"Address already registered as entity\\\");\\n        \\n        registeredUsers[_user] = true;\\n        emit UserRegistered(_user, false);\\n    }\\n\\n    /**\\n     * @dev Registers an entity\\n     * @param _entity Address of the entity to register\\n     */\\n    function registerEntity(address _entity) external onlyAgent {\\n        require(_entity != address(0), \\\"Cannot register zero address\\\");\\n        require(!registeredEntities[_entity], \\\"Entity already registered\\\");\\n        require(!registeredUsers[_entity], \\\"Address already registered as user\\\");\\n        \\n        registeredEntities[_entity] = true;\\n        emit UserRegistered(_entity, true);\\n    }\\n\\n    /**\\n     * @dev Creates a new community\\n     * @param _name Name of the community\\n     * @param _description Description of the community\\n     */\\n    function createCommunity(string calldata _name, string calldata _description) external {\\n        require(bytes(_name).length > 0, \\\"Community name cannot be empty\\\");\\n        require(bytes(_description).length > 0, \\\"Community description cannot be empty\\\");\\n        require(registeredUsers[msg.sender] || registeredEntities[msg.sender], \\\"Only registered users or entities can create communities\\\");\\n\\n        uint256 communityId = communityIdCounter++;\\n        Community storage newCommunity = communities[communityId];\\n        newCommunity.name = _name;\\n        newCommunity.description = _description;\\n        newCommunity.creator = msg.sender;\\n        newCommunity.createdAt = block.timestamp;\\n\\n        emit CommunityCreated(communityId, _name, msg.sender);\\n    }\\n    \\n    \\n    /**\\n     * @dev Adds a member to a community\\n     * @param _communityId ID of the community\\n     * @param _member Address of the member to add\\n     */\\n    function addMember(uint256 _communityId, address _member) external {\\n        require(_communityId < communityIdCounter, \\\"Community does not exist\\\");\\n        require(msg.sender == communities[_communityId].creator, \\\"Only the creator can add members\\\");\\n        require(registeredUsers[_member], \\\"Member must be a registered user\\\");\\n\\n        communities[_communityId].members.push(_member);\\n        emit MemberAdded(_communityId, _member);\\n    }\\n\\n    /**\\n     * @dev Retrieves community information\\n     * @param _communityId ID of the community\\n     */\\n    function getCommunity(uint256 _communityId) external view returns (Community memory) {\\n        require(_communityId < communityIdCounter, \\\"Community does not exist\\\");\\n        return communities[_communityId];\\n    }\\n\\n\\n    /**\\n     * @dev Removes a normal user\\n     * @param _user Address of the user to remove\\n     */\\n    function removeUser(address _user) external onlyAgent {\\n        require(_user != address(0), \\\"Cannot remove zero address\\\");\\n        require(registeredUsers[_user], \\\"User not registered\\\");\\n        \\n        registeredUsers[_user] = false;\\n        emit UserRemoved(_user, false);\\n    }\\n\\n    /**\\n     * @dev Returns a list of all agents\\n     */\\n    function getAgents() external view returns (address[] memory) {\\n        uint256 agentCount = 0;\\n        for (uint256 i = 0; i < block.number; i++) {\\n            if (agents[address(uint160(i))]) {\\n                agentCount++;\\n            }\\n        }\\n\\n        address[] memory agentList = new address[](agentCount);\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < block.number; i++) {\\n            if (agents[address(uint160(i))]) {\\n                agentList[index++] = address(uint160(i));\\n            }\\n        }\\n        return agentList;\\n    }\\n\\n    /**\\n     * @dev Removes an entity\\n     * @param _entity Address of the entity to remove\\n     */\\n    function removeEntity(address _entity) external onlyAgent {\\n        require(_entity != address(0), \\\"Cannot remove zero address\\\");\\n        require(registeredEntities[_entity], \\\"Entity not registered\\\");\\n        \\n        registeredEntities[_entity] = false;\\n        emit UserRemoved(_entity, true);\\n    }\\n\\n    /**\\n     * @dev Checks if an address is a registered user\\n     * @param _address Address to check\\n     */\\n    function isRegisteredUser(address _address) external view returns (bool) {\\n        return registeredUsers[_address];\\n    }\\n\\n    /**\\n     * @dev Checks if an address is a registered entity\\n     * @param _address Address to check\\n     */\\n    function isRegisteredEntity(address _address) external view returns (bool) {\\n        return registeredEntities[_address];\\n    }\\n\\n    /**\\n     * @dev Checks if an address is an agent\\n     * @param _address Address to check\\n     */\\n    function isAgent(address _address) external view returns (bool) {\\n        return agents[_address];\\n    }\\n\\n}\",\"keccak256\":\"0x9e572325aafc217d40216cc9c0ce262eec981553a420dee958859661d9ab7a87\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80635b6c497f1161008c5780638da5cb5b116100665780638da5cb5b1461022c578063972481fe1461023d57806397a6278e14610250578063f2fde38b1461026357600080fd5b80635b6c497f146101fe578063715018a61461021157806384e798421461021957600080fd5b806330561100116100c857806330561100146101715780633e413bee146101865780633ef02d13146101b157806340731c24146101c457600080fd5b80630b1e7f83146100ef5780631ffbb064146101205780632685ffcb1461015c575b600080fd5b6101026100fd3660046114c9565b610276565b60405161011799989796959493929190611528565b60405180910390f35b61014c61012e3660046115dc565b6001600160a01b031660009081526003602052604090205460ff1690565b6040519015158152602001610117565b61016f61016a3660046116a1565b610575565b005b610179610934565b604051610117919061177b565b600654610199906001600160a01b031681565b6040516001600160a01b039091168152602001610117565b600554610199906001600160a01b031681565b6101d76101d23660046114c9565b610d51565b604080516001600160a01b0390941684526020840192909252151590820152606001610117565b61016f61020c366004611894565b610dd9565b61016f611221565b61016f6102273660046115dc565b611235565b6000546001600160a01b0316610199565b600454610199906001600160a01b031681565b61016f61025e3660046115dc565b611348565b61016f6102713660046115dc565b611401565b60026020819052600091825260409091208054600182015492820180546001600160a01b039092169392916102aa906118c0565b80601f01602080910402602001604051908101604052809291908181526020018280546102d6906118c0565b80156103235780601f106102f857610100808354040283529160200191610323565b820191906000526020600020905b81548152906001019060200180831161030657829003601f168201915b505050505090806003018054610338906118c0565b80601f0160208091040260200160405190810160405280929190818152602001828054610364906118c0565b80156103b15780601f10610386576101008083540402835291602001916103b1565b820191906000526020600020905b81548152906001019060200180831161039457829003601f168201915b5050505050908060040180546103c6906118c0565b80601f01602080910402602001604051908101604052809291908181526020018280546103f2906118c0565b801561043f5780601f106104145761010080835404028352916020019161043f565b820191906000526020600020905b81548152906001019060200180831161042257829003601f168201915b505050505090806005018054610454906118c0565b80601f0160208091040260200160405190810160405280929190818152602001828054610480906118c0565b80156104cd5780601f106104a2576101008083540402835291602001916104cd565b820191906000526020600020905b8154815290600101906020018083116104b057829003601f168201915b5050505050908060060180546104e2906118c0565b80601f016020809104026020016040519081016040528092919081815260200182805461050e906118c0565b801561055b5780601f106105305761010080835404028352916020019161055b565b820191906000526020600020905b81548152906001019060200180831161053e57829003601f168201915b50505050600783015460089093015491929160ff16905089565b60048054604051631f5bdf5d60e01b815233928101929092526001600160a01b031690631f5bdf5d90602401602060405180830381865afa1580156105be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e291906118f4565b8061065557506004805460405163daf60b7160e01b815233928101929092526001600160a01b03169063daf60b7190602401602060405180830381865afa158015610631573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065591906118f4565b6106b05760405162461bcd60e51b815260206004820152602160248201527f4d75737420626520726567697374657265642075736572206f7220656e7469746044820152607960f81b60648201526084015b60405180910390fd5b600086116107005760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064016106a7565b6006546040516323b872dd60e01b8152336004820152306024820152604481018890526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077b91906118f4565b6107c75760405162461bcd60e51b815260206004820152601460248201527f55534443207472616e73666572206661696c656400000000000000000000000060448201526064016106a7565b60018054600091826107d88361192c565b90915550604080516101208101825233815260208082018b81528284018b8152606084018b9052608084018a905260a0840189905260c084018890524260e0850152600161010085018190526000878152600294859052959095208451815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909116178155915194820194909455925193945090929082019061087a9082611994565b506060820151600382019061088f9082611994565b50608082015160048201906108a49082611994565b5060a082015160058201906108b99082611994565b5060c082015160068201906108ce9082611994565b5060e08201516007820155610100909101516008909101805460ff1916911515919091179055604051878152339082907f35e9d1576a3cf0faf0d7e6d6fd53fcfebe5a51f7043238e20ff4125e5df657739060200160405180910390a350505050505050565b6060600060015467ffffffffffffffff811115610953576109536115fe565b6040519080825280602002602001820160405280156109de57816020015b6109cb60405180610120016040528060006001600160a01b03168152602001600081526020016060815260200160608152602001606081526020016060815260200160608152602001600081526020016000151581525090565b8152602001906001900390816109715790505b50905060005b600154811015610d4b5760008181526002602081815260409283902083516101208101855281546001600160a01b0316815260018201549281019290925291820180549193840191610a35906118c0565b80601f0160208091040260200160405190810160405280929190818152602001828054610a61906118c0565b8015610aae5780601f10610a8357610100808354040283529160200191610aae565b820191906000526020600020905b815481529060010190602001808311610a9157829003601f168201915b50505050508152602001600382018054610ac7906118c0565b80601f0160208091040260200160405190810160405280929190818152602001828054610af3906118c0565b8015610b405780601f10610b1557610100808354040283529160200191610b40565b820191906000526020600020905b815481529060010190602001808311610b2357829003601f168201915b50505050508152602001600482018054610b59906118c0565b80601f0160208091040260200160405190810160405280929190818152602001828054610b85906118c0565b8015610bd25780601f10610ba757610100808354040283529160200191610bd2565b820191906000526020600020905b815481529060010190602001808311610bb557829003601f168201915b50505050508152602001600582018054610beb906118c0565b80601f0160208091040260200160405190810160405280929190818152602001828054610c17906118c0565b8015610c645780601f10610c3957610100808354040283529160200191610c64565b820191906000526020600020905b815481529060010190602001808311610c4757829003601f168201915b50505050508152602001600682018054610c7d906118c0565b80601f0160208091040260200160405190810160405280929190818152602001828054610ca9906118c0565b8015610cf65780601f10610ccb57610100808354040283529160200191610cf6565b820191906000526020600020905b815481529060010190602001808311610cd957829003601f168201915b50505091835250506007820154602082015260089091015460ff1615156040909101528251839083908110610d2d57610d2d611a54565b60200260200101819052508080610d439061192c565b9150506109e4565b50919050565b60008060006001548410610da75760405162461bcd60e51b815260206004820152601360248201527f506f737420646f6573206e6f742065786973740000000000000000000000000060448201526064016106a7565b5050506000908152600260205260409020805460018201546008909201546001600160a01b039091169260ff90911690565b6001548210610e2a5760405162461bcd60e51b815260206004820152601360248201527f506f737420646f6573206e6f742065786973740000000000000000000000000060448201526064016106a7565b6000828152600260205260409020600881015460ff16610e8c5760405162461bcd60e51b815260206004820152601660248201527f506f737420697320616c726561647920636c6f7365640000000000000000000060448201526064016106a7565b80546001600160a01b0316331480610eb357503360009081526003602052604090205460ff165b610f0b5760405162461bcd60e51b8152602060048201526024808201527f4f6e6c792063726561746f72206f72206167656e742063616e20636c6f7365206044820152631c1bdcdd60e21b60648201526084016106a7565b6001600160a01b038216610f615760405162461bcd60e51b815260206004820152601b60248201527f496e76616c69642062656e65666963696172792061646472657373000000000060448201526064016106a7565b60088101805460ff191690556001810154600090606490610f83906061611a6a565b610f8d9190611a87565b90506000818360010154610fa19190611aa9565b6006546040516323b872dd60e01b81523060048201526001600160a01b038781166024830152604482018690529293509116906323b872dd906064016020604051808303816000875af1158015610ffc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102091906118f4565b61106c5760405162461bcd60e51b815260206004820181905260248201527f42656e65666963696172792055534443207472616e73666572206661696c656460448201526064016106a7565b6006546001600160a01b03166323b872dd306110906000546001600160a01b031690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03928316600482015291166024820152604481018490526064016020604051808303816000875af11580156110fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112091906118f4565b61116c5760405162461bcd60e51b815260206004820152601a60248201527f4f776e65722055534443207472616e73666572206661696c656400000000000060448201526064016106a7565b6005546040516340c10f1960e01b81526001600160a01b03868116600483015260326024830152909116906340c10f1990604401600060405180830381600087803b1580156111ba57600080fd5b505af11580156111ce573d6000803e3d6000fd5b50505050836001600160a01b0316857f8e6176efb8452374af8fe3c248fb188d55bdefdd985dfcbe1057dbf0a6af7511856001015460405161121291815260200190565b60405180910390a35050505050565b61122961143f565b611233600061146c565b565b61123d61143f565b6001600160a01b0381166112935760405162461bcd60e51b815260206004820181905260248201527f43616e6e6f7420616464207a65726f2061646472657373206173206167656e7460448201526064016106a7565b6001600160a01b03811660009081526003602052604090205460ff16156112fc5760405162461bcd60e51b815260206004820152601b60248201527f4164647265737320697320616c726561647920616e206167656e74000000000060448201526064016106a7565b6001600160a01b038116600081815260036020526040808220805460ff19166001179055517ff68e73cec97f2d70aa641fb26e87a4383686e2efacb648f2165aeb02ac562ec59190a250565b61135061143f565b6001600160a01b03811660009081526003602052604090205460ff166113b85760405162461bcd60e51b815260206004820152601760248201527f41646472657373206973206e6f7420616e206167656e7400000000000000000060448201526064016106a7565b6001600160a01b038116600081815260036020526040808220805460ff19169055517fed9c8ad8d5a0a66898ea49d2956929c93ae2e8bd50281b2ed897c5d1a6737e0b9190a250565b61140961143f565b6001600160a01b03811661143357604051631e4fbdf760e01b8152600060048201526024016106a7565b61143c8161146c565b50565b6000546001600160a01b031633146112335760405163118cdaa760e01b81523360048201526024016106a7565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156114db57600080fd5b5035919050565b6000815180845260005b81811015611508576020818501810151868301820152016114ec565b506000602082860101526020601f19601f83011685010191505092915050565b60006101206001600160a01b038c1683528a60208401528060408401526115518184018b6114e2565b90508281036060840152611565818a6114e2565b9050828103608084015261157981896114e2565b905082810360a084015261158d81886114e2565b905082810360c08401526115a181876114e2565b60e0840195909552505090151561010090910152979650505050505050565b80356001600160a01b03811681146115d757600080fd5b919050565b6000602082840312156115ee57600080fd5b6115f7826115c0565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261162557600080fd5b813567ffffffffffffffff80821115611640576116406115fe565b604051601f8301601f19908116603f01168101908282118183101715611668576116686115fe565b8160405283815286602085880101111561168157600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c087890312156116ba57600080fd5b86359550602087013567ffffffffffffffff808211156116d957600080fd5b6116e58a838b01611614565b965060408901359150808211156116fb57600080fd5b6117078a838b01611614565b9550606089013591508082111561171d57600080fd5b6117298a838b01611614565b9450608089013591508082111561173f57600080fd5b61174b8a838b01611614565b935060a089013591508082111561176157600080fd5b5061176e89828a01611614565b9150509295509295509295565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561188657888303603f19018552815180516001600160a01b0316845261012088820151898601528782015181898701526117e2828701826114e2565b915050606080830151868303828801526117fc83826114e2565b925050506080808301518683038288015261181783826114e2565b9250505060a0808301518683038288015261183283826114e2565b9250505060c0808301518683038288015261184d83826114e2565b9250505060e08083015181870152506101008083015192506118728187018415159052565b5095880195935050908601906001016117a2565b509098975050505050505050565b600080604083850312156118a757600080fd5b823591506118b7602084016115c0565b90509250929050565b600181811c908216806118d457607f821691505b602082108103610d4b57634e487b7160e01b600052602260045260246000fd5b60006020828403121561190657600080fd5b815180151581146115f757600080fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161193e5761193e611916565b5060010190565b601f82111561198f57600081815260208120601f850160051c8101602086101561196c5750805b601f850160051c820191505b8181101561198b57828155600101611978565b5050505b505050565b815167ffffffffffffffff8111156119ae576119ae6115fe565b6119c2816119bc84546118c0565b84611945565b602080601f8311600181146119f757600084156119df5750858301515b600019600386901b1c1916600185901b17855561198b565b600085815260208120601f198616915b82811015611a2657888601518255948401946001909101908401611a07565b5085821015611a445787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b8082028115828204841417611a8157611a81611916565b92915050565b600082611aa457634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115611a8157611a8161191656fea2646970667358221220dd8416e1db606f52a11ad9b3b4ab32cdcf692da1911770552f939c44f12fe42964736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addAgent(address)": {
        "details": "Adds a new agent",
        "params": {
          "_agent": "Address of the agent to add"
        }
      },
      "closePost(uint256,address)": {
        "details": "Closes a post and distributes the reward",
        "params": {
          "_beneficiary": "Address to receive the reward",
          "_postId": "ID of the post to close"
        }
      },
      "createPost(uint256,string,string,string,string,string)": {
        "details": "Creates a new post with a reward amount",
        "params": {
          "_amount": "Amount of USDC for the reward"
        }
      },
      "getAllPosts()": {
        "details": "Returns all posts.",
        "returns": {
          "_0": "allPosts An array of Post structs containing all the posts."
        }
      },
      "getPost(uint256)": {
        "details": "Returns post information",
        "params": {
          "_postId": "ID of the post"
        }
      },
      "isAgent(address)": {
        "details": "Checks if an address is an agent",
        "params": {
          "_address": "Address to check"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeAgent(address)": {
        "details": "Removes an agent",
        "params": {
          "_agent": "Address of the agent to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/FindPet.sol:FindPet",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1548,
        "contract": "contracts/FindPet.sol:FindPet",
        "label": "postIdCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1572,
        "contract": "contracts/FindPet.sol:FindPet",
        "label": "posts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Post)1567_storage)"
      },
      {
        "astId": 1576,
        "contract": "contracts/FindPet.sol:FindPet",
        "label": "agents",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1595,
        "contract": "contracts/FindPet.sol:FindPet",
        "label": "registerUsers",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(RegisterUsers)3447"
      },
      {
        "astId": 1598,
        "contract": "contracts/FindPet.sol:FindPet",
        "label": "tokenPawsForHopeToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(PawsForHopeToken)2455"
      },
      {
        "astId": 1601,
        "contract": "contracts/FindPet.sol:FindPet",
        "label": "usdc",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IERC20)877"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)877": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(PawsForHopeToken)2455": {
        "encoding": "inplace",
        "label": "contract PawsForHopeToken",
        "numberOfBytes": "20"
      },
      "t_contract(RegisterUsers)3447": {
        "encoding": "inplace",
        "label": "contract RegisterUsers",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Post)1567_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FindPet.Post)",
        "numberOfBytes": "32",
        "value": "t_struct(Post)1567_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Post)1567_storage": {
        "encoding": "inplace",
        "label": "struct FindPet.Post",
        "members": [
          {
            "astId": 1550,
            "contract": "contracts/FindPet.sol:FindPet",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1552,
            "contract": "contracts/FindPet.sol:FindPet",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1554,
            "contract": "contracts/FindPet.sol:FindPet",
            "label": "imgUrl",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1556,
            "contract": "contracts/FindPet.sol:FindPet",
            "label": "petName",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1558,
            "contract": "contracts/FindPet.sol:FindPet",
            "label": "description",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1560,
            "contract": "contracts/FindPet.sol:FindPet",
            "label": "location",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 1562,
            "contract": "contracts/FindPet.sol:FindPet",
            "label": "contactInfo",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 1564,
            "contract": "contracts/FindPet.sol:FindPet",
            "label": "timestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1566,
            "contract": "contracts/FindPet.sol:FindPet",
            "label": "isOpen",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}